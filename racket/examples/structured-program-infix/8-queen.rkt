#lang racket
(require "structured-program-infix.rkt")

(define (queen n)
  (prog
    (var v = () (n))
    (var cnt = 0)
    (var i)
    (for ((i = 0) (i < n) (i = i + 1))
	 (v(i) = i))
    (while ($next v)
	   (if ($queen-ok v)
	       (begin
		 (cnt = cnt + 1)
		 ($print-queen v))))
    ($printf "\nThere are ~a solutions\n" cnt)))

(define (next v)
  (prog
    (var i j k t)
    (var n = sizeof v)
    (for ((i = n - 2) (i >= 0) (i = i - 1))
	 (if (v(i + 1) > v(i))
	     (break)))
    (if (i < 0)
	(return #f))
    (j = n - 1)
    (while (v(j) < v(i))
	   (j = j - 1))
    (t = v(j))
    (v(j) = v(i))
    (v(i) = t)
    (j = (i + n + 1) // 2)
    (k =  i + n)
    (for ((i = i + 1) (i < j) (i = i + 1))
	 (t = v(i))
	 (v(i) = v(k - i))
	 (v(k - i) = t))
    (return #t)))

(define (queen-ok v)
  (prog
    (var i j)
    (var n = sizeof v)
    (var t t2)
    (for ((i = 0) (i < n - 1) (i = i + 1))
	 (t = v(i))
	 (for ((j = i + 1) (j < n) (j = j + 1))
	      (t2 = t - v(j))
	      (if (t2 == i - j or t2 == j - i)
		  (return #f))
	      )
	 )
    (return #t)
    )
  )

(define (print-queen v)
  (prog
    (var n = sizeof v)
    (var i j)
    ($printf "\n")
    (for ((i = 0) (i < n) (i = i + 1))
	 (for ((j = 0) (j < n) (j = j + 1))
	      (if (j == v(i))
		  ($printf "Q ")
		  ($printf "+ ")))
	 ($printf "\n"))))

;Run
(prog
  ($queen 8))
