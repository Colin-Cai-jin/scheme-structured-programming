(import (structured-program-infix))

(define (play-renju n)
  (prog
    (var step_cnt = 0)
    (var step)
    (var board = (()) (n n) 0)
    ($display-renju board)
    (while #t
	   (line line_a)
	   (if (step_cnt % 2 == 0)
	       ($printf "\nIt's black's turn\n")
	       ($printf "\nIt's white's turn\n"))
	   ($printf "Please input two numbers for the coordinate\n")
	   (step = ($get-step-renju))
	   (if (step(0) < 0 or step(0) >= n
			or step(1) < 0 or step(1) >= n)
	       (begin
		 ($printf "0 <= (x, y) < (~a, ~a)\n" n n)
		 (goto line_a)))
	   (if (board(step(1))(step(0)) != 0)
	       (begin
		 ($printf "There is a stone on (~a, ~a). Please input again\n" (step(0)) (step(1)))
		 (goto line_a)))
	   (board(step(1))(step(0)) = step_cnt % 2 == 0 ? 1 : 2)
	   (step_cnt = step_cnt + 1)
	   ($display-renju board)
	   (if ($over-renju board)
	       (begin
		 ($printf "~a WIN!\n" (step_cnt % 2 == 0 ? "WHITE" : "BLACK"))
		 (break))))))

(define (display-renju board)
  (prog
    (var i j)
    ($printf "\n")
    ($printf "\n")
    ($printf "    ")
    (for ((i = 0) (i < sizeof board(0)) (i = i + 1))
	 (if (i < 10)
	     ($display "  ")
	     (begin
	       ($display " ")
	       ($display (i // 10)))))
    ($printf "\n")
    ($printf "    ")
    (for ((i = 0) (i < sizeof board(0)) (i = i + 1))
	 ($display " ")
	 ($display (i % 10)))
    ($printf "\n\n")
    (for ((i = 0) (i < sizeof board) (i = i + 1))
	 ($printf "~a~a  " (i < 10 ? " " : "")  i)
	 (for ((j = 0) (j < sizeof board(0)) (j = j + 1))
	      (if (board(i)(j) == 0)
		  ($printf " +")
		  (if (board(i)(j) == 1)
		      ($printf " o")
		      ($printf " x"))))
	 ($printf "\n"))))

(define (get-step-renju)
  (prog
    (var step = () (2))
    (step(0) = ($read))
    (step(1) = ($read))
    (return step)))

(define (over-renju board)
  (prog
    (var i j k)
    (var n = sizeof board)
    (var t t2)
    (var check = () (2))
    (check(0) = 1)
    (check(1) = 32)
    (for ((i = 0) (i < n) (i =  i + 1))
	 (for ((j = 0) (j < n - 4) (j =  j + 1))
	      (t = 1)
	      (t2 = 1)
	      (for ((k = 0) (k < 5) (k = k + 1))
		   (t = t * board(i)(j + k))
		   (t2 = t2 * board(j + k)(i)))
	      (if (($is-in-array t check) or ($is-in-array t2 check))
		  (return #t))))
    (for ((i = 0) (i < n - 4) (i =  i + 1))
	 (for ((j = 0) (j < n - 4) (j =  j + 1))
	      (t = 1)
	      (t2 = 1)
	      (for ((k = 0) (k < 5) (k = k + 1))
		   (t = t * board(i + k)(j + k))
		   (t2 = t2 * board(i + 4 - k)(j + k)))
	      (if (($is-in-array t check) or ($is-in-array t2 check))
		  (return #t))))
    (return #f)))

(define (is-in-array a arr)
  (prog
    (var i)
    (for ((i = 0) (i < sizeof arr) (i = i + 1))
	 (if (arr(i) == a)
	     (return #t)))
    (return #f)))

;Let's play
(prog
  ($play-renju 15))
