(import (structured-program-infix))

(function (play-weiqi n black_sub_stones)
  (var step_cnt = 0)
  (var step killed self_qi)
  (var board = (()) (n n) 0)
  (var board_bak = (()) (n n) 0)
  (var kill_stones = () (2) 0)
  (var last_eat_one_stone = (()) (2 2) -1)
  ($display-weiqi board kill_stones)
  (while #t
	 (line line_input)
	 (if (step_cnt % 2 == 0)
	     ($printf "\nIt's black's turn\n")
	     ($printf "\nIt's white's turn\n"))
	 ($printf "Please input two numbers for the coordinate (input -1 to work out the result)\n")
	 (step = ($get-step-weiqi))
	 (if (! step)
	     (begin
	       ($judge board black_sub_stones)
	       (return)))
	 (if (step(0) < 0 or step(0) >= n
		      or step(1) < 0 or step(1) >= n)
	     (begin
	       ($printf "Out of the board 0 <= (x, y) < (~a, ~a) Please input again\n" n n)
	       (goto line_input)))
	 (if (board(step(1))(step(0)) != 0)
	     (begin
	       ($printf "There is a stone on (~a, ~a). Please input again\n" (step(0)) (step(1)))
	       (goto line_input)))
	 ($copy-board board board_bak)
	 (board(step(1))(step(0)) = step_cnt % 2 == 0 ? 1 : 2)
	 (self_qi = ($run-one-step board step))
	 (killed = ($compare board board_bak step))
	 (if (((! self_qi) and killed(0) == 0)
	      or ((! self_qi) and killed(0) == 1
			      and last_eat_one_stone(0)(0) == killed(1)
			      and last_eat_one_stone(0)(1) == killed(2)
			      and last_eat_one_stone(1)(0) == step(0)
			      and last_eat_one_stone(1)(1) == step(1)))
	     (begin
	       ($printf "It's illegal. Please input again\n")
	       ($copy-board board_bak board)
	       (goto line_input)))
	 (if ((! self_qi) and killed(0) == 1)
	     (begin
	       (last_eat_one_stone(0)(0) = step(0))
	       (last_eat_one_stone(0)(1) = step(1))
	       (last_eat_one_stone(1)(0) = killed(1))
	       (last_eat_one_stone(1)(1) = killed(2)))
	     (last_eat_one_stone(0)(0) = -1))
	 (if (step_cnt % 2 == 0)
	     (kill_stones(0) = kill_stones(0) + killed(0))
	     (kill_stones(1) = kill_stones(1) + killed(0)))
	 (step_cnt = step_cnt + 1)
	 ($display-weiqi board kill_stones)))

(function (compare board board_bak step)
  (var ret = () (3) 0)
  (var i j)
  (var x = step(0))
  (var y = step(1))
  (var n = sizeof board)
  (for ((i = 0)(i < n)(i = i + 1))
       (for ((j = 0)(j < n)(j = j + 1))
	    (if (board(j)(i) != board_bak(j)(i))
		(if (i != x or j != y)
		    (begin
		      (ret(0) = ret(0) + 1)
		      (ret(1) = i)
		      (ret(2) = j))))))
  (return ret))

(function (copy-board from to)
  (var i j)
  (var n = sizeof from)
  (for ((i = 0) (i < n) (i = i + 1))
       (for ((j = 0) (j < n) (j = j + 1))
	    (to(i)(j) = from(i)(j)))))

(function (you-qi-rec board flags n color x y)
  (var i x2 y2)
  (var dir = ($make-4-directions))
  (flags(y)(x) = #f)
  (for ((i = 0) (i < 4) (i = i + 1))
       (x2 = x + dir(i)(0))
       (y2 = y + dir(i)(1))
       (if (x2 < 0 or x2 >= n or y2 < 0 or y2 >= n)
	   (continue))
       (if (board(y2)(x2) == 0)
	   (return #t))
       (if (flags(y2)(x2)
	     and board(y2)(x2) == color
	     and ($you-qi-rec board flags n color x2 y2))
	   (return #t)))
  (return #f))

(function (you-qi board x y)
  (var n = sizeof board)
  (var flags = (()) (n n) #t)
  (var color = board(y)(x))
  (return ($you-qi-rec board flags n color x y)))

(function (make-4-directions)
  (var dir = (()) (4 2))
  (dir(0)(0) = 0)
  (dir(0)(1) = 1)
  (dir(1)(0) = 0)
  (dir(1)(1) = -1)
  (dir(2)(0) = 1)
  (dir(2)(1) = 0)
  (dir(3)(0) = -1)
  (dir(3)(1) = 0)
  (return dir))

(function (clear-stones board color x y)
  (var i x2 y2)
  (var n = sizeof board)
  (var dir = ($make-4-directions))
  (board(y)(x) = 0)
  (for ((i = 0) (i < 4) (i = i + 1))
       (x2 = x + dir(i)(0))
       (y2 = y + dir(i)(1))
       (if (x2 < 0 or x2 >= n or y2 < 0 or y2 >= n)
	   (continue))
       (if (board(y2)(x2) == color)
	   ($clear-stones board color x2 y2))))

(function (run-one-step board step)
  (var i)
  (var x = step(0))
  (var y = step(1))
  (var x2 y2)
  (var self_color = board(y)(x))
  (var other_color = self_color == 1 ? 2 : 1)
  (var n = sizeof board)
  (var self_qi other_qi)
  (var dir = ($make-4-directions))
  (self_qi = ($you-qi board x y))
  (for ((i = 0) (i < 4) (i = i + 1))
       (x2 = x + dir(i)(0))
       (y2 = y + dir(i)(1))
       (if (x2 >= 0 and x2 < n and y2 >= 0 and y2 < n
	       and board(y2)(x2) == other_color)
	   (if ($you-qi board x2 y2)
	       (continue)
	       ($clear-stones board other_color x2 y2))))
  (return self_qi))

(function (judge board black_sub_stones)
  (var step)
  (var n = sizeof board)
  (var v)
  (while #t
	 (line line_input)
	 ($printf "Please input two numbers for the coordinate to clear(input -1 for the last result)\n")
	 (step = ($get-step-weiqi))
	 (if (! step)
	     (begin
	       (v = ($calculate board))
	       ($printf "Black : ~a stones  White : ~a stones\n" (v(0)) (v(1)))
	       (v(0) = v(0) - black_sub_stones)
	       (if (v(0) == v(1))
		   ($printf "Tie\n")
		   (if (v(0) > v(1))
		       ($printf "Black win\n")
		       ($printf "White win\n")))
	       (return)))
	 (if (step(0) < 0 or step(0) >= n
		      or step(1) < 0 or step(1) >= n)
	     (begin
	       ($printf "Out of the board 0 <= (x, y) < (~a, ~a) Please input again\n" n n)
	       (goto line_input)))
	 (if (board(step(1))(step(0)) == 0)
	     (begin
	       ($printf "There is no stone on (~a, ~a). Please input again\n" (step(0)) (step(1)))
	       (goto line_input)))
	 ($clear-stones-last board (step(0)) (step(1)))
	 ($display-weiqi board #f)))

(function (clear-stones-last board x y)
  (var i x2 y2)
  (var n = sizeof board)
  (var flags = (()) (n n) #t)
  ($clear-stones-last-rec board n flags (board(y)(x)) x y))

(function (clear-stones-last-rec board n flags color x y)
  (var i x2 y2)
  (var dir = ($make-4-directions))
  (board(y)(x) = 0)
  (flags(y)(x) = #f)
  (for ((i = 0) (i < 4) (i = i + 1))
       (x2 = x + dir(i)(0))
       (y2 = y + dir(i)(1))
       (if (x2 < 0 or x2 >= n or y2 < 0 or y2 >= n)
	   (continue))
       (if (flags(y2)(x2) and (board(y2)(x2) == color or board(y2)(x2) == 0))
	   ($clear-stones-last-rec board n flags color x2 y2))))

(function (calculate board)
  (var n = sizeof board)
  (var board_bak = (()) (n n))
  (var i j)
  (var cnt_black = 0)
  (var cnt_white = 0)
  ($copy-board board board_bak)
  (for ((i = 0) (i < n) (i = i + 1))
       (for ((j = 0) (j < n) (j = j + 1))
	    (if (board_bak(j)(i) == 0)
		($dye-board board_bak n i j))))
  (for ((i = 0) (i < n) (i = i + 1))
       (for ((j = 0) (j < n) (j = j + 1))
	    (if (board_bak(j)(i) == 1)
		(cnt_black = cnt_black + 1)
		(if (board_bak(j)(i) == 2)
		    (cnt_white = cnt_white + 1)))))
  (return : cnt_black >-< : cnt_white))

(function (dye-board-rec board n x y)
  (var i x2 y2)
  (var ret = 0)
  (var dir = ($make-4-directions))
  (board(y)(x) = 3)
  (for ((i = 0) (i < 4) (i = i + 1))
       (x2 = x + dir(i)(0))
       (y2 = y + dir(i)(1))
       (if (x2 < 0 or x2 >= n or y2 < 0 or y2 >= n)
	   (continue))
       (if (board(y2)(x2) == 1 or board(y2)(x2) == 2)
	   (ret = ret bit-or board(y2)(x2)))
       (if (board(y2)(x2) == 0)
	   (ret = ret bit-or ($dye-board-rec board n x2 y2))))
  (return ret))

(function (dye-board board n x y)
  (var ret)
  (var color)
  (var i j)
  (ret = ($dye-board-rec board n x y))
  (if (ret == 1 or ret == 2)
      (color = ret)
      (color = 5))
  (for ((i = 0) (i < n) (i = i + 1))
       (for ((j = 0) (j < n) (j = j + 1))
	    (if (board(j)(i) == 3)
		(board(j)(i) = color)))))

(function (display-weiqi board kill_stones)
  (var i j)
  ($printf "\n")
  ($printf "\n")
  ($printf "    ")
  (for ((i = 0) (i < sizeof board(0)) (i = i + 1))
       (if (i < 10)
	   ($display "  ")
	   (begin
	     ($display " ")
	     ($display (i // 10)))))
  ($printf "\n")
  ($printf "    ")
  (for ((i = 0) (i < sizeof board(0)) (i = i + 1))
       ($display " ")
       ($display (i % 10)))
  ($printf "\n\n")
  (for ((i = 0) (i < sizeof board) (i = i + 1))
       ($printf "~a~a  " (i < 10 ? " " : "")  i)
       (for ((j = 0) (j < sizeof board(0)) (j = j + 1))
	    (if (board(i)(j) == 0)
		($printf " +")
		(if (board(i)(j) == 1)
		    ($printf " o")
		    ($printf " x"))))
       ($printf "\n"))
  (if kill_stones
      ($printf "\nBlack killed ~a stones | White killed ~a stones\n" (kill_stones(0)) (kill_stones(1)))))

(function (get-step-weiqi)
  (var step = () (2))
  (step(0) = ($read))
  (if (step(0) == -1)
      (return #f))
  (step(1) = ($read))
  (return step))

(function (~print b)
  (var i j)
  (var n = sizeof b)
  ($printf "\n")
  (for ((i = 0)(i < n)(i = i + 1))
       (for ((j = 0)(j < n)(j = j + 1))
	    ($printf "~a" (b(i)(j))))
       ($printf "\n"))
  ($printf "\n"))

;Let's play
(prog
  ($play-weiqi 19 7.5))
